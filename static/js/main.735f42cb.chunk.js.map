{"version":3,"sources":["images/weathercardbackground.png","components/tools/IconConverter.jsx","components/WeeklyWeatherCard.jsx","utilities/convertDate.js","components/CurrentWeatherCard.jsx","components/WeatherCard.jsx","components/WeatherOverview.jsx","App.js","index.js"],"names":["IconConverter","iconId","name","flip","rotate","WeeklyWeatherCard","lat","lon","useState","weeklyData","setWeeklyData","useEffect","fetch","process","then","res","json","result","clicked","setClicked","dailyArray","daily","className","src","weathercardbackground","alt","map","item","i","onClick","toggle","unixTime","dt","Date","toLocaleDateString","weather","id","temp","min","toFixed","max","morn","day","eve","night","CurrentWeatherCard","city","currentData","setCurrentData","main","sys","country","temp_min","temp_max","humidity","WeatherCard","WeatherOverview","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.735f42cb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/weathercardbackground.87d5ddd7.png\";","import React from 'react'\nimport WeatherIcon from 'react-icons-weather'\n\nexport default function IconConverter({ iconId }) {\n\n    return (\n        <WeatherIcon name=\"owm\" iconId={iconId} flip=\"horizontal\" rotate=\"90\" />    \n    )\n}\n","\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport weathercardbackground from '../images/weathercardbackground.png'\nimport IconConverter from './tools/IconConverter'\nimport { convertDate } from '../utilities/convertDate'\n\nexport default function WeeklyWeatherCard({ lat, lon }) {\n\n  const [weeklyData, setWeeklyData] = useState([]);\n\n  useEffect(() => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly&appid=${process.env.REACT_APP_API_KEY}&units=metric`\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        setWeeklyData(result);\n      });\n  },\n    [lat, lon]);\n\n    //set state accordeon\n    const [clicked, setClicked] = useState(null);\n    const toggle = i => {\n        if (clicked === i){\n            return setClicked(null)\n        }\n        setClicked(i)\n    }\n\n    //array to map\n    const dailyArray = weeklyData.daily\n\n  return (\n    <div className=\"weekly-weather-card weather-card-back\">\n      {typeof weeklyData.daily != \"undefined\" ? (\n\n        <div>\n            <div className=\"weather-card-container\">\n              <img className=\"background-image\" src={weathercardbackground} alt=\"background\" />\n\n              <div className=\"weather-card-info\">\n\n                <div className=\"accordion-wrapper\">\n                {dailyArray.map((item, i) => (\n                    <div className=\"accordion-item\">\n                        <div className=\"accordion-title\" onClick={() => toggle(i) }>\n                            {/* <p><DateConverter index={item} /></p> */}\n                            <p>{convertDate(item.dt)}</p>\n                            <p><IconConverter iconId={item.weather[0].id} /></p>\n                            <p><span>{item.temp.min.toFixed(0)}/{item.temp.max.toFixed(0)}°C</span></p>\n                            <p>{clicked === i ? \"-\" : \"+\" }</p>\n                        </div>\n                        <div className={clicked === i ? \"accordion-content open\" : \"accordion-content\"}>\n                            <table className=\"accordion-table\">\n                            <tbody>\n                                <tr>\n                                    <th></th>\n                                    <th>Ochtend</th>\n                                    <th>Middag</th>\n                                    <th>Avond</th>\n                                    <th>Nacht</th>\n                                </tr>\n                                <tr>\n                                    <td>Temp</td>\n                                    <td>{item.temp.morn.toFixed(1)}°C</td>\n                                    <td>{item.temp.day.toFixed(1)}°C</td>\n                                    <td>{item.temp.eve.toFixed(1)}°C</td>\n                                    <td>{item.temp.night.toFixed(1)}°C</td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                ))}\n                </div>\n              </div>\n            </div>\n        </div>  \n      ) : (\n        <div></div>\n    )}\n</div>\n);\n}\n\n\n// import React, { useState, useEffect } from 'react';\n// import WeeklyWeatherAccordion from './WeeklyWeatherAccordion';\n// import weathercardbackground from '../images/weathercardbackground.png'\n\n// export default function WeeklyWeatherCard({ lat, lon }) {\n\n//   const [weeklyData, setWeeklyData] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\n//       `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly&appid=${process.env.REACT_APP_API_KEY}&units=metric`\n//     )\n//       .then((res) => res.json())\n//       .then((result) => {\n//         setWeeklyData(result);\n//       });\n//   },\n//     [lat, lon]);\n\n//   //array to map\n//   const dailyArray = weeklyData.daily\n\n//   return (\n//     <div className=\"weekly-weather-card\">\n//       <div className=\"weather-card-container\">\n//         <img className=\"background-image\" src={weathercardbackground} alt=\"background\" />\n        \n//         {typeof weeklyData.daily != \"undefined\" ? (\n//           <div className=\"weather-card-info\">\n//             <div className=\"accordion-wrapper\">\n//               {dailyArray.map((item, i) => (<WeeklyWeatherAccordion index={i} item={item} />))}\n//             </div>\n//           </div>\n\n//       ) : (\n\n//       <div></div>\n\n//       )}\n//     </div>\n// </div >\n// );\n// }\n\n         \n\n\n","// import React from 'react'\n\n// export default function DateConverter({ index }) {\n\n//         const unixTime = index.dt;\n//         const date = new Date(unixTime * 1000);\n        \n//     return date.toLocaleDateString()\n    \n// }\n\nexport const convertDate = (unixTime) => {\n    const date = new Date(unixTime * 1000);\n    \nreturn date.toLocaleDateString()\n}\n\n  \n\n","import React, { useState, useEffect } from 'react';\nimport weathercardbackground from '../images/weathercardbackground.png'\nimport IconConverter from './tools/IconConverter'\n\nexport default function CurrentWeatherCard({ city }) {\n\n    const [currentData, setCurrentData] = useState([]);\n\n    useEffect(() => {\n        fetch(\n            `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}&units=metric`\n        )\n            .then((res) => res.json())\n            .then((result) => {\n                setCurrentData(result);\n            });\n    },\n        [city]);\n\n        \n    return (\n        <div className=\"current-weather-card weather-card-front\">\n            {typeof currentData.main != \"undefined\" ? (\n\n                <div className=\"weather-card-container\">\n                    <img className=\"background-image\" src={weathercardbackground} alt=\"background\" />\n                    <div className=\"background-image-overlay\"></div>\n                    <div className=\"weather-card-info\">\n                        <div className=\"icon\">\n                            <IconConverter iconId={currentData.weather[0].id} />\n                        </div>\n                        <div className=\"text-container\">\n                            <p>{currentData.name}, {currentData.sys.country}</p>\n                            <hr />\n                            <p className=\"temperature-main\">{currentData.main.temp.toFixed(1)}C°</p>\n                            <p>min: {currentData.main.temp_min.toFixed(1)}C°</p>\n                            <p>max: {currentData.main.temp_max.toFixed(1)}C°</p>\n                            <p>humidity: {currentData.main.humidity.toFixed(1)}%</p>\n                        </div>\n                    </div>\n                </div>\n\n            ) : (\n\n                <div></div>\n\n            )}\n        </div>\n    );\n}\n\n\n\n\n\n\n\n","import React from 'react';\nimport WeeklyWeatherCard from './WeeklyWeatherCard';\nimport CurrentWeatherCard from './CurrentWeatherCard';\n\nexport default function WeatherCard({ city, lat, lon }) {\n\n   return (\n\n      <div className=\"weather-card\">\n         <div className=\"weather-card-inner\">\n         <CurrentWeatherCard city={city} />\n         <WeeklyWeatherCard lat={lat} lon={lon} />\n         </div>\n      </div>\n   );\n}\n\n\n\n","import React from \"react\";\nimport WeatherCard from \"./WeatherCard\";\n\n\nexport default function WeatherOverview() {\n\n  return (\n    <div className=\"weather-overview\">\n    <WeatherCard city=\"Amsterdam\" lat=\"52.374\" lon=\"4.8897\"/>\n    <WeatherCard city=\"Nijmegen\" lat=\"51.8333\" lon=\"5.85\" />\n    </div>\n  );\n}\n\n","import \"./App.css\";\nimport React from \"react\";\nimport WeatherOverview from \"./components/WeatherOverview\";\n\n/*\nalle logica voor day night mode \nloading state hier plaatse \napis naar hier verplaatsen wel in losse component\n\n*/\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">React Weather App</h1>\n      <WeatherOverview />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}